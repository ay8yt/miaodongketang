{
	"id" : "this",
	"detail" : `
		<div class="row">
			<div class="col-sm-12">
				<div class="jumbotron"> <p> <span>用中国话学this指向</span> </p> </div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<code> 这篇文章针对有JS基础，但始终无法搞清楚this指向的同学 </code>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<code>
							如果你知道call和apply以及bind方法，那就再好不过了
						</code>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<code>
              你还需要知道汉语当中的，第一人称和第二人称以及第三人称的区别
						</code>
					</div>
				</div>

				<div id="01"></div>
				<br><br><br>
				<div class="panel panel-info">
					<div class="panel-heading"> <h2>先看个新闻</h2> </div>
					<div class="panel-body">
						<h4>
              <code>
                “我体内的恶魔已被锁住了这么多年，现在这种锁链已经松了。”
              </code>
            </h4>
            <h4>
              <code>
                “我很害怕，很孤独，很疑惑，我将要向导致我的痛苦的根源——社会作出反击，我想尽我所能地去伤害这个社会，然后死去。”
              </code>
            </h4>
						<h4>
							<p> 这段令人不寒而栗的文字，是美国北达科他州系列杀人案嫌犯约瑟夫·邓肯于2005年5月11日写下的。</p>
              <p>
              当人们在近两个月后看到这段文字时，他已经将一个 5口之家的3人残忍地杀害，并绑架了另外2名分别为8岁和9岁的孩子。 </p>
							<p> 假设，你是一个警察，抓到了一个嫌疑犯 </p>
							<p> 然后你在他的家里搜出这本日记，此时你作何感想？ </p>
						</h4>
						<div class="panel panel-success">
							<div class="panel-heading">
								你肯定会想，如果这是嫌疑人自己写的，这不就等于认罪了嘛？
							</div>
						</div>
						<p>
              当然，犯罪嫌疑人也可以狡辩说，这日记根本不是我写的，只是我从网上摘抄的段子
						</p>
            <p>
              其实, 我们只需要将上面那段文字稍微做一丢丢的改动, 这份有力的杀人证据,瞬间就会变得不那么有力了
            </p>

            <div class="panel panel-success">
            	<div class="panel-heading">
                <b>他</b> <code> 体内的恶魔已被锁住了这么多年，现在这种锁链已经松了。 </code>
                <b>他</b> <code> 很害怕，很孤独，很疑惑， </code> <b>他</b> <code> 将要向导致 </code>
                <b>他</b> <code> 的痛苦的根源——社会作出反击，</code> <b>他</b> <code> 想尽 </code>
                <b>他</b> <code> 所能地去伤害这个社会，然后死去。</code>
              </div>
            </div>

            <p>
              <b>发现没有</b>,仅仅只是把第一人称, 改为了第三人称。
            </p>
            <p>
              你很难因为这个而定嫌疑犯的罪。 因为这看上去太像个小说了
            </p>
            <p>
              为什么会有这样的差别呢？
            </p>
            <p>
              带着对这个问题的思考, 我们来开始今天this指向的学习。
            </p>
					</div>
				</div>
			</div>
		</div>
		<div id="02"></div>
		<br><br><br>

		<div class="row">
			<div class="col-sm-12">
				<div class="panel panel-info">
					<div class="panel-heading">
						<h2>this的英文含义</h2>
					</div>
					<div class="panel-body">
						<p> 先看英文解释 <button class="btn btn-default btn-lg">this: 这样、这个</button> </p>
						<p>接下来看一段代码</p>
            <code-format>
              <img src="/static/images/this/a1.png"/>
            </code-format>

            <p>结果很容易预测，打印<span class="commond-line">obj</span>对象本身 </p>
            <p>在JS中，this属于一个关键字，也就是可以理解为，它是一个系统自带命令</p>
            <p>通常，我们把它的含义解释为：<code><b>当前对象</b></code></p>

            <p><b>那么问题来了： 当前对象到底是指谁呢？</b></p>
            <p>在上面的代码案例中，this代表的就是<span class="commond-line">obj</span>这个对象</p>
            <p>接下来我们再看一段代码</p>
            <code-format>
             <img src="/static/images/this/a2.png"/>
            </code-format>
            <p>结果打印<span class="commond-line">window</span>对象 </p>
            <p>如果你对这个打印结果感到奇怪，那么可能你忽略了一个常识问题</p>
            <p><code><b>window对象是可以省略不写的！</b></code></p>
            <p class="text-primary bold">所以，上面的代码，实际上等价于：</p>
            <code-format>
             <img src="/static/images/this/a3.png"/>
            </code-format>
            <p>我们再来看一个常见的例子，关于事件绑定</p>
            <code-format>
             <img src="/static/images/this/a4.png"/>
            </code-format>
            <p>最终，无论是手动调用，还是单击鼠标浏览器自动调用 </p>
            <p>打印结果都是<span class="commond-line">btn</span>对象 </p>
					</div>
				</div>
			</div>
		</div>

		<div id="03"></div>
		<br><br><br>

		<div class="row">
			<div class="col-sm-12">
				<div class="panel panel-info">
					<div class="panel-heading">
						<h2>我们似乎总结出了一个this指向的规律</h2>
					</div>
					<div class="panel-body">
						<p class="answers bold"> this总是指向，调用函数的对象 </p>
						<p class="answers"> 如果你的代码结构是这样的 <img src="/static/images/this/a5.png"/></p>
						<p class="answers"> <code>那么，函数里的this，必然指向这个对象本身</code></p>
						<p class="answers"> 假设这个结论是成立的， 我们不妨来验证一下我们的猜想！！ </p>
            <code-format>
             <img src="/static/images/this/a6.png"/>
            </code-format>

						<p class="answers">从上面代码的例子中，可以看出来</p>
						<p class="answers"><code>window</code>对象和<code>obj1</code>对象和<code>obj2</code>对象，共享了一个函数
              <code>show</code>
            </p>

            <code-format>
             <img src="/static/images/this/a7.png"/>
            </code-format>

						<p>三个对象，用了同一个函数</p>
            <p>但打印出的this是各不相同的</p>
            <p>window.show();  打印出window对象</p>
            <p>obj1.show1();  打印出obj1对象</p>
            <p>obj2.show2();  打印出obj2对象</p>


						<p class="answers">这似乎再一次印证了，我们刚才的猜想：
              <code>函数由哪个对象调用，this就指向哪个对象</code>
            </p>
					</div>
				</div>

			</div>
		</div>

		<div id="04"></div>
		<br><br><br>

		<div class="row">
			<div class="col-sm-12">
				<div class="panel panel-info">
					<div class="panel-heading">
						<h2>科学是严谨的，得出结论之前，我们还是要反复验证</h2>
					</div>
					<div class="panel-body">
						<p>再看一个例子：</p>
						<code-format>
						 <img src="/static/images/this/a8.png"/>
						</code-format>
            <p>实际上，我只是在原来代码的基础上，增加了一个延迟器，并且时间设为0</p>
            <p>那么打印出的this会不会有变化呢？？</p>
            <p>你可以先思考一番</p>

            <p>通常按照直觉，我们会认为，延迟器只是延缓了执行时间，打印结果依然还是btn对象，没有变化</p>
            <p>但经过测试发现，实际的打印结果，是 <code>window</code>对象</p>

            <p>是我们刚才的猜想错了吗？</p>
            <p>要解释这个现象，我们得重新来观察这段代码</p>
            <code-format>
              <img src="/static/images/this/a9.png"/>
            </code-format>
             <p>注意代码当中出现了两个函数，我们分别起名字叫做函数A和函数B</p>
            <p class="answers">按照我们刚才的猜想：
              <code>函数由哪个对象调用，this就指向哪个对象</code>
            </p>
            <p>所以，this指向会依赖它所在的函数</p>
            <p>而这个函数，到底是 函数<code>A</code>还是函数<code>B</code>呢？</p>
            <p>其实你不难从代码中看的出来， <span class="commond-line">this</span>很明显是在函数<code>B</code>中的</p>

            <p>所以， 结果没有打印出 <span class="commond-line">btn</span>， 现在我们也不感到奇怪了</p>
            <p>
              因为， <span class="commond-line">this</span>已经不再函数
              <code>A</code>的内部了，而是函数<code>B</code>的内部
            </p>
            <p class="text-primary bold">你可能还要问，为什么函数<code>B</code>里的
              <span class="commond-line">this</span>指向<span class="commond-line">window</span>呢？
            </p>
            <p>这里其实算是一个特例，传入定时器的函数，由哪个对象调用,我们不得而知</p>
            <p> 这种情况，<span class="commond-line">this</span>通通指向<span class="commond-line">window</span></p>
            <p>你暂时记住这个规律就好了，等你学完了作用域链，你就会明白其中的本质</p>
					</div>
				</div>

			</div>
		</div>

		<div id="05"></div>
		<br><br>

    <div class="row">
    	<div class="col-sm-12">
    		<div class="panel panel-info">
    			<div class="panel-heading">
    				<h2>回到我们开头的新闻</h2>
    			</div>
    			<div class="panel-body">
            <p> 假设日记就是嫌疑人写的。 但日记里全是第三人称。那么 "他" 到底是谁就很难说了 </p>
            <p> 反过来如果日记里用的都是第一人称写的。 那么 "我" 肯定指的是嫌疑人自己 </p>
    				<p>
              JS函数当中的<span class="commond-line">this</span>关键字，
              就相当于我们说话中的第一人称代词<span class="commond-line">我</span>
            </p>
    				<p>例如这样一个例子：</p>
            <p class="bold text-primary">A对B说：“我要杀了你！”</p>
            <p>
              这里的<span class="commond-line">我</span>指代A，
              <span class="commond-line">你</span> 指代B
            </p>
            <p class="bold text-primary">B对A说：”我要弄死你！”</p>
            <p>
              这里的<span class="commond-line">我</span>指代B，
              <span class="commond-line">你</span> 指代A
            </p>
            <p class="bold text-success">所以你看，同样的一个字，它可以指代任何人，关键看从谁的嘴里说出来</p>
            <code-format>
              <img src="/static/images/this/a13.png"/>
            </code-format>
    			</div>

    		</div>

    	</div>
    </div>

    <div id="06"></div>
    <br><br>
		<div class="row">
			<div class="col-sm-12">
				<div class="panel panel-info">
					<div class="panel-heading">
						<h2>到目前为止，我们差不多可以得出结论了，下面用几个练习最终验证一下</h2>
					</div>
					<div class="panel-body">
						<code-format>
						  <img src="/static/images/this/a10.png"/>
						</code-format>
						<p>上面的代码，最终打印<span class="commond-line">obj</span>对象</p>
						<p>无论经过多少曲折，我们最终只看一个结论，那就是，<b><code>this所在的函数，由哪个对象调用？</code></b></p>
						<p>我把代码进一步改造</p>
            <code-format>
						  <img src="/static/images/this/a11.png"/>
						</code-format>
            <p>上面的代码，最终打印还是<span class="commond-line">obj</span>对象</p>
            <p class="panel-body bg-danger">当然了，也总会有一些例外情况, 比如下面这个：</p>
						<code-format>
						  <img src="/static/images/this/a12.png"/>
						</code-format>
            <p>我们不禁要问，函数m2是由哪个对象调用的？</p>
            <p>我们想尽了各种可能，最终发现都是错的。我们始终不知道这个m2由哪个对象调用，好像它就那样执行了</p>
            <p>而实际的打印结果呢？ </p>
            <p>不出意外，还是<span class="commond-line">window</span>对象</p>

            <div class="panel panel-danger">
            	<div class="panel-heading">
            		<h4>最后的结论</h4>
            	</div>
            	<div class="panel-body">
            		<p>1. 所有的this关键字，在函数运行时，才能确定它的指向</p>
            		<p>2. this所在的函数由哪个对象调用，this就会指向谁</p>
            		<p>3. 当函数执行时，没有明确的调用对象时，则this指向window</p>
            	</div>
            </div>
					</div>
				</div>
			</div>
		</div>

    <div id="07"></div>
    <br><br>
	<div class="row">
		<div class="col-sm-12">
			<div class="panel panel-info">
				<div class="panel-heading">
					<h2>由this衍生出的问题</h2>
				</div>
				<div class="panel-body">
					<p>刚才遗留了一个问题没有解决</p>
		<code-format>
		  <img src="/static/images/this/a14.png"/>
		</code-format>
		<p>我们期待this指向btn，而this现在却指向了window</p>
		<p>这个问题该怎么修复呢？ 有很多办法</p>
		<p class="bold">如果你不知道call、apply、bind，那么恐怕你只能看得懂方法A</p>
		<code-format>
		  <img src="/static/images/this/a15.png"/>
		</code-format>
		<p></p>
		<code-format>
		  <img src="/static/images/this/a16.png"/>
		</code-format>
		<p></p>
		<code-format>
		  <img src="/static/images/this/a17.png"/>
		</code-format>
		<p></p>
		<code-format>
		  <img src="/static/images/this/a18.png"/>
		</code-format>
				</div>
			</div>
		</div>
	</div>


    <div id="08"></div>
    <br><br>
	<div class="row">
		<div class="col-sm-12">
			<div class="panel panel-info">
				<div class="panel-heading">
					<h2>接下来的内容，学完ES6的箭头函数再来吧</h2>
				</div>
				<div class="panel-body">
					<p class="text-warning">
						<b>
						  1. 如何判断箭头函数的this？
						</b>
					</p>
					<p class="answers text-muted">
						因为箭头函数不具备自己的this，所以非常简单，假装它不存在，就像这样：
					</p>
		<code-format>
		  <img src="/static/images/this/a19.png"/>
		</code-format>
		<p>这下this的指向非常清晰了吧</p>
					<p class="text-warning">
						<b>
							2. 箭头函数可以用call来改变this指向吗？
						</b>
					</p>
					<p class="answers text-muted">
						不能！！ 试图改变箭头函数的this是徒劳的。
					</p>
		<code-format>
		  <img src="/static/images/this/a20.png"/>
		</code-format>
				</div>
			</div>
		</div>
	</div>

	<div id="09"></div>
	<br><br>

	<div class="row">
		<div class="col-sm-12">
			<div class="panel panel-info">
				<div class="panel-heading">
					<h2>最后一个特例<code>构造函数</code></h2>
				</div>
				<div class="panel-body">
					<p class="text-warning">
						<b>
              1. 什么是构造函数？
						</b>
					</p>
					<p class="answers text-muted">
						假设有一个函数Fn, 我们有两种方式来调用它
					</p>

          <ul class="list-group">
            <li class="list-group-item">
              普通的调用 <a class="btn btn-default btn-lg">Fn()</a>
            </li>
            <li class="list-group-item">
              配合<code>new</code>关键字来调用
              <a class="btn btn-default btn-lg">new Fn()</a>
            </li>
          </ul>
          <p>
            <b> 第二种调用方式, 函数就变成了构造函数</b>
          </p>
          <p class="answers text-muted">
          	<code>注意</code>,在构造函数中, 上面我们所讲的结论,是不成立的！！
          </p>
          <p class="text-warning">
          	<b>
              2. 那构造函数里的this是谁呢？
          	</b>
          </p>
          <p class="text-danger">
          	<b>
              请期待下一篇文章《构造函数与class》
          	</b>
          </p>
				</div>
			</div>
		</div>
	</div>
	`
}
