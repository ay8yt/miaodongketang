{
	"id" : "promise",
	"detail" : `
		
		<div class="row">
			<div class="col-sm-12">
				<div class="jumbotron">
				  	<p>
				  		<span>
				  			Promise异步编程
				  		</span>
				  	</p>
				</div>
				<div class="panel panel-default">
				  	<div class="panel-heading">
					    <code>注意：</code>
					    <code>
					    	这篇文章的目的是让你用最快的速度理解Promise的核心思想和基本用法，想要了解更多细节全面的使用方式，请阅读官方API
					    </code>
				  	</div>
				</div>
				<div class="panel panel-default">
				  	<div class="panel-heading">
					    <code>另外：</code>
					    <code>
					    	这篇文章假定你具备最基本的异步编程知识，例如知道什么是回调，知道什么是链式调用，同时具备最基本的单词量，例如page、user、promise、then、resovle、reject、pay、fix、order等等，如果你对这些单词非常陌生，那么你需要先花点时间补充一下你的英语，否则你仍然会感觉这篇文章难以理解。（参考我在表达能力训练视频中讲解的信息不对称原理）
					    </code>
				  	</div>
				</div>
				<div id="01"></div>
				<br><br><br>
				<div class="panel panel-info">
				  	<div class="panel-heading">
					    <h2>什么是异步操作？</h2>
				  	</div>
				  	<div class="panel-body">
				  		<h4>
				  			所谓异步操作，指的是可以跟当前程序同时执行的操作。<b>举例:</b>
				  			<p></p>
				  		</h4>
				  		<div class="code-board">
							<table>
								<tr>
									<td width="670">
										<div>
											<span style=" color: #F92672;">$</span><span style=" color: white;">(</span><span style=" color: #E6DB74;">"#page"</span><span style=" color: white;">).</span><span style=" color: #66D9EF;">scrolltop</span><span style=" color: white;">(</span><span style=" color: #9D81FF;">0</span>
											<span style=" color: white;">,</span><span style=" color: #9D81FF;">1000</span><span style=" color: white;">);&nbsp; &nbsp;&nbsp;</span><span style="color: #75715E;">//使用1秒钟时间将页面滚动至顶部</span>
										</div>
										<div>
											<br>
										</div>
										<div>
											<span style=" color: #F92672;">$</span><span style=" color: white;">(</span><span style=" color: #E6DB74;">"#nav-float"</span><span style=" color: white;">).</span><span style=" color: #66D9EF;">hide</span>
											<span style=" color: white;">(</span><span style=" color: #9D81FF;">1000</span><span style=" color: white;">);&nbsp; &nbsp;&nbsp;<span style="color: #75715E;">//使用1秒钟时间将悬浮导航栏隐藏</span></span>
										</div>
									</td>
								</tr>
							
							</table>
						</div>

						<h4>
							<p>
								只要你稍微有点异步编程经验，就应该知道，这两个方法会同时完成。
							</p>
							<p>
								它们的编写顺序并不会影响它们的执行顺序
							</p>
						</h4>

						<div class="code-board">

							<table>
								<tr>
									<td style="width: 670px;">
										<div><span style="color: #75715E;">//异步操作的特点就是，不会打断当前程序的执行</span></div>
										<div><span style="color: #75715E;">//getUsers请求发出后，会立刻向下继续执行第二个请求</span></div>
										<div><span style=" color: #66D9EF;">ajax</span><font style="color: white;">(<span style=" color: #E6DB74;">"/getUsers</span><span style=" color: #E6DB74;">"</span>,<span style=" color: #66D9EF;">function</span>(</font><font style="color: #FD8920;">data</font><font style="color: white;">) {</font></div>
										<div>&nbsp; &nbsp; &nbsp;&nbsp;<span style="color: #75715E;">//回掉函数会在请求成功后调用</span></div>
										<div><span style="color: white; ">})</span></div>
										<div><span style=" color: #75715E;">//resumelist请求会立刻开始，无论getUsers是否结束</span></div>
										<div><span style=" color: #66D9EF;">ajax</span><font style="color: white;">(<span style=" color: #E6DB74;">"/resumelist"</span>,&nbsp;<span style=" color: #66D9EF;">function</span>(<span style=" color: #FD8920;">data</span>) {</font></div>
										<div><font style=" color: white;">})</font></div>
										<div><span style=" color: #75715E;">//至于哪一个ajax先返回结果并执行回调函数，从代码的编写顺序上是无法确定的。</span></div>
									</td>
								</tr>
							</table>
						</div>
						<h4>
							<p>
								我们可以给异步操作做一个简单的定义
							</p>
						</h4>
						<div class="panel panel-success">
							<div class="panel-heading">
								当一个操作开始执行后，主程序无需等待它的完成，可以继续向下执行。此时该操作可以跟主程序同时（并发）执行。这种操作我们就称之为<b>异步操作</b>。
								通常当操作完成时，会执行一个我们事先设定好的回调函数来做后续的处理。
							</div>
						</div>

						<h4>
				  			我们常见的异步操作例如：
				  		</h4>
						<div class="btn-group">
						  	<button class="btn btn-default">添加定时器 setTimeout/setInterval</button>
						  	<button class="btn btn-default">执行某个动画 animate</button>
						  	<button class="btn btn-default">发起网络请求 request</button>
						</div>	
				  	</div>

				</div>

			</div>
		</div>
		<div id="02"></div>
		<br><br><br>

		<div class="row">
			<div class="col-sm-12">
				<div class="panel panel-info">
					<div class="panel-heading">
						<h2>异步会带来什么问题？</h2>
					</div>
					<div class="panel-body">
						<p>比如我们现在有两个动画，需要按顺序来执行，也就是第一个结束，第二个才能开始</p>
						<p>这个时候可能有点麻烦，传统的解决方法是通过回调：</p>
						
						<div class="code-board">
							<table>
								<tr>
									<td style="width: 260px;">
										<div><span style=" color: #66D9EF;">animateA</span><span style="color: white; ">(</span><span style=" color: #66D9EF;">function</span><span style=" color: white;">( ){</span>
										</div>
										<div>
											<span style="color: #66D9EF; ">&nbsp; &nbsp; &nbsp; animateB</span><span style=" color: white;">(</span> 
											<span style=" color: white;">);</span><span style=" color: white;">&nbsp;</span><span style="color: #66D9EF; ">&nbsp; &nbsp;&nbsp;</span>
										</div>
										<div>
											<span style=" color: white;">})&nbsp;&nbsp;</span>
											<span style=" color: #66D9EF;">&nbsp;&nbsp;</span>
											<span style=" color: white;">&nbsp;</span>
										</div>
									</td>
								</tr>
							</table>
						</div>

						<p>这种方案显然不太好，如果有很多异步操作需要顺序执行，就会产生所谓的“回调地狱”</p>

						<div class="code-board">
						<table>

							<tr>
								<td style="width: 420px;">
									<div>
										<span style=" color: #66D9EF;">ajaxA</span><span style="color: white; ">(</span><span style=" color: #66D9EF;">function</span><span style=" color: white;">( ){</span>
									</div>
									<div>
										<span style="color: #66D9EF; ">&nbsp; &nbsp; &nbsp; ajaxB</span><span style="color: white;">(<span style=" color: #66D9EF;">function</span><span style=" color: white;">( ){</span>
										</span>
									</div>
									<div>
										<span style="color: #66D9EF; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ajaxC</span><span style=" color: white;">(<span style=" color: #66D9EF;">function</span><span style=" color: white;">( ){</span>
										</span>
									</div>
									<div>
										<span style="color: #66D9EF; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ajaxD</span><span style=" color: white;">(<span style=" color: #66D9EF;">function</span><span style=" color: white;">( ){</span></span>
									</div>
									<div>
										<span style="color: #66D9EF; ">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style=""><font style="color: white;">......</font></span>
										<span style=" color: white;">&nbsp;</span><span style="color: #66D9EF; ">&nbsp; &nbsp;&nbsp;</span>
									</div>
									<div>
										&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
										<span style=" color: white;">});</span>&nbsp;&nbsp; &nbsp;&nbsp;
									</div>
									<div>
										&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=" color: white;">});</span>&nbsp;&nbsp; &nbsp;&nbsp;
									</div>
									<div>
										&nbsp; &nbsp; &nbsp;<span style=" color: white;"> });</span>&nbsp;&nbsp; &nbsp;&nbsp;
									</div>
									<div>
										<span style=" color: white;">})</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
									</div>
								</td>
							</tr>
						</table>

						</div>
						
						<p>这种代码不管是写起来还是读起来都比较烦人。 我们来看下经过Promise改造后的样子（伪代码）</p>

						<div class="code-board">
							<table>
								<tr>	
									<td style="width: 260px;">
										<div>
											<span style=" color: #66D9EF;"><span style=" color: #F92672;">new</span>&nbsp;Promise</span><span style="color: white; ">(</span><span style=""><font style="color: white;">ajaxA</font></span><span style=" color: white;">)</span>
										</div>
										<div>
											<span style=" color: white;">&nbsp; &nbsp; &nbsp; &nbsp; .</span><span style="color: #66D9EF; ">then</span><span style=" color: white;">(<span style=" color: white;">ajaxB</span></span><span style=" color: white;">)</span>
										</div>
										<div>
											<span style=" color: white;">&nbsp; &nbsp; &nbsp; &nbsp; .</span><span style="color: #66D9EF; ">then</span><span style=" color: white;">(<span style=" color: white;">ajaxC</span></span><span style=" color: white;">)</span>
										</div>
										<div>
											<span style=" color: white;">&nbsp; &nbsp; &nbsp; &nbsp; .</span><span style="color: #66D9EF; ">then</span><span style=" color: white;">(<span style=" color: white;">ajaxD</span></span><span style=" color: white;">);</span><span style=" color: white;">&nbsp;</span><span style="color: #66D9EF; ">&nbsp; &nbsp;&nbsp;</span>
										</div>
									</td>
								</tr>
							</table>
						</div>
						
					</div>
				</div>
			</div>
		</div>

		<div id="03"></div>
		<br><br><br>

		<div class="row">
			<div class="col-sm-12">
				<div class="panel panel-info">
					<div class="panel-heading">
						<h2>Promise的使用及原理</h2>
					</div>
					<div class="panel-body">
						<p>要熟练Promise的的使用，你必须要先搞懂它解决问题的原理</p>
						<p>贴一段实际的Promise代码，你来感受一下先：</p>
						<div class="code-board">
							<table>
								<tr>
									<td style=" width: 500px; ">
										<div>
											<span style="color: #F92672;">new</span><span style="color: #F8F8F2;">Promise(resolve</span><span style="color: #F92672;">=&gt;</span><span style="color: #F8F8F2;">{</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(</span><span style="color: #E6DB74;">"/pay/post"</span><span style="color: #F8F8F2;">, data</span><span style="color: #F92672;">=&gt;</span><span style="color: #F8F8F2;">resolve() );</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">}).then(resolve</span><span style="color: #F92672;">=&gt;</span><span style="color: #F8F8F2;">{</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(</span><span style="color: #E6DB74;">"/order/fix"</span><span style="color: #F8F8F2;">, data</span><span style="color: #F92672;">=&gt;</span><span style="color: #F8F8F2;">{</span>
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #75715E;">//处理数据&nbsp;&nbsp;&nbsp;</span>
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">})</span>
										</div>
										<div><span style="color: #F8F8F2;">})</span></div>
									</td>
								</tr>
							</table>
						</div>
						<p>上面的代码使用了<code>ES6</code>的<code>箭头函数</code>,虽然大大简化了代码的写法，但对于初级程序猿来讲极不友好</p>
						<p>读这种代码简直跟读金刚经差不多。我们把代码还原成<code>ES5</code>的样子</p>
						<div class="code-board">
							<table>
								<tr>
									<td style="width: 500px; ">
										<div>
											<span style="color: #F92672;">new</span>
											<span style="color: #A6E22E;">Promise</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">resolve</span><span style="color: #F8F8F2;">){</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(</span><span style="color: #E6DB74;">"/pay/post"</span><span style="color: #F8F8F2;">,</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">data</span><span style="color: #F8F8F2;">){</span>
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">resolve();</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">}).</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: #F8F8F2;">){</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(</span><span style="color: #E6DB74;">"/order/fix"</span><span style="color: #F8F8F2;">,</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">data</span><span style="color: #F8F8F2;">){</span>
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">})</span>
										</div>
										<div><span style="color: #F8F8F2;">})</span></div>
									</td>
								</tr>
							</table>
						</div>
						<h3><p class="text-danger title">接下来，我们就按照费曼技巧来一步步的学习Promise是如何解决问题的</p></h3>
						<p class="text-warning">
							<b>
								<code>问题1</code>, 作为一个异步函数，尤其像ajax这种网络请求，连我自己都不能确定函数的执行时间，Promise是怎么知道第一个函数什么时候结束的？ 然后再开始执行下一个？
							</b>
						</p>
						<p class="text-muted answers">
							Promise并没有那么神奇，它并不能知道我们的函数什么时候结束，你注意到上面代码中的第<code>3</code>行了吗
						</p>
						<p class="text-muted answers">
							在ajax请求结束执行回调的时候，我们调用了一个<code>resolve()</code>函数，这句代码非常的关键.
						</p>
						<p class="text-muted answers">
							这其实就是在通知Promise，当前这个函数结束啦，你可以开始执行下一个。 这时Promise就会去执行then里面的函数了。
						</p>
						<p class="text-warning">
							<b>
								<code>问题2</code>, 所以按照你的意思，如果我不调用这个方法，Promise就不知道这个函数有没有结束，那么then里面的函数就不会执行，也就是说我的第二个请求就永远不会发送了呗？
							</b>
						</p>
						<p class="text-muted answers">
							Bingo!! 恭喜你已经学会了逻辑推理+抢答。
						</p>
						<p class="text-warning">
							<b>
								<code>问题3</code>, 可是这个<code>resolve</code>函数是从哪来的？ 需要我自己定义吗？ 从代码上看它好像是个参数，那又是谁传入函数中的？
							</b>
						</p>
						<p class="text-muted answers">
							你得先弄明白Promise的基本结构
						</p>
						<div class="code-board">
							<table><tr>
								<td style="  width: 500px; ">
									<div><span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(函数1).then(函数2);</span></div>
								</td>
							</tr></table>
						</div>
						<p class="text-muted answers">
							我们把函数1和函数2都以参数形式传给了一个Promise对象，所以接下来函数1和2都会由这个Promise对象控制，
							简单的说，函数1和函数2都会由Promise对象来执行。
							所以在函数1执行时，参数也当然是由Promise对象传递进去的。
						</p>
						<div class="code-board">
							<table><tr>
								<td style="width: 500px;">
									<div>
										<span style="color: #F92672;">new</span>
										<span style="color: #A6E22E;">Promise</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">resolve</span><span style="color: #F8F8F2;">){</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
										<span style="color: #75715E;">//resolve是Promise对象在调用函数时传入的参数</span>
									</div>
									<div><span style="color: #F8F8F2;">}).then(函数2);</span></div>
								</td>
							</tr></table>
						</div>
						<p class="text-warning">
							<b>
								<code>问题4</code>, Promise对象为啥要在执行第1个任务的时候，把这个<code>resolve</code>函数
								传进来，有什么目的？
							</b>
						</p>
						<p class="text-muted answers">
							你说呢？
						</p>
						<p class="text-warning">
							<b>
								废屁，知道还用问你？
							</b>
						</p>
						<p class="text-muted answers">
							真是猪脑子，刚才不是已经说了吗？ Promise对象没办法知道我们的异步函数啥时候结束。那我来问你，
							如果你去车站接人，可是你又不知道对方何时下车，你会咋办？
						</p>
						<p class="text-warning">
							<b>
								把我电话号码给他，快到了打我电话呗
							</b>
						</p>
						<p class="text-muted answers">
							没错，Promise解决问题也采用了同样的思路。它传进来的<code>resolve</code>函数，
							就好像一个对讲机，当我们的异步任务要结束时，通过对讲机
							来通知Promise对象。也就是调用<code>resolve</code>方法
						</p>
						<div class="code-board">
							<table>
								<tr>
									<td style="width: 813px;">
										<div>
											<span style="color: #F92672;">new</span>
											<span style="color: #A6E22E;">Promise</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">resolve</span><span style="color: #F8F8F2;">){</span>
										</div>
										<div >
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ajax(</span><span style="color: #E6DB74;">"/pay/post"</span><span style="color: #F8F8F2;">,</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">data</span><span style="color: #F8F8F2;">){</span>
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #75715E;">//当请求结束时，通过调用resolve方法，通知Promise对象，该任务已完成</span>
										</div>
										<div>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
											<span style="color: #F8F8F2;">resolve();</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
											<span style="color: #75715E;">//收到通知后，Promise会立刻开始函数2的执行</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })</span>
										</div>
										<div>
											<span style="color: #F8F8F2;">}).then(函数2);</span>
										</div>
									</td>
								</tr>
							</table>
						</div>
						<p class="text-warning">
							<b>
								懂了，所以这个resolve函数，必须在异步任务的最后调用(例如ajax的回调方法)，相当于告诉Promise对象，该任务结束，请开始下一个。
							</b>
						</p>
						<p class="text-muted answers">
							完全正确
						</p>
						<p class="text-warning">
							<b>
								<code>问题5</code>, 所以Promise也不过如此嘛，它没有带来什么功能上的革命性变化，
								因为使用传统的回调嵌套的方式，同样可以完成效果。 
								说白了它就是编码方式上的改进？？
							</b>
						</p>
						<p class="text-muted answers">
							基本是这样的，但Promise带来的编码方式以及异步编程思路上的进步是非常巨大的。
						</p>
						<p class="text-warning">
							<b>
								<code>问题6</code>, 那如果我有ajaxA、ajaxB、ajaxC三个异步任务，想按照先A后B再C的顺序执行，像这样写行吗？ 
							</b>
						</p>
						<p class="text-muted answers">
							不行
						</p>
						<p class="text-warning">
							<b>
								靠！ 我还没说呢！
							</b>
						</p>
						<p class="text-muted answers">
							那你说
						</p>
						<p class="text-warning">
							<b>如果我这样写呢？</b>
						</p>
						<div class="code-board">
							<table><tr>
								<td style="width: 813px; ">
									<div>
										<span style="color: #F92672;">new</span>
										<span style="color: #A6E22E;">Promise</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">resolve</span><span style="color: #F8F8F2;">){</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">ajax(</span><span style="color: #E6DB74;">"/AAA"</span><span style="color: #F8F8F2;">,</span>
										<span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span>
									</div>
									<div >
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">resolve();</span> <span style="color: #75715E;">//通知Promise该任务结束</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">})&nbsp;&nbsp;&nbsp;&nbsp;</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">}).</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">resolve</span><span style="color: #F8F8F2;">){</span>
									</div>
									<div >
										<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(</span><span style="color: #E6DB74;">"/BBB"</span><span style="color: #F8F8F2;">,</span>
										<span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">resolve();</span><span style="color: #75715E;">//通知Promise该任务结束</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">})</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">}).</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(</span><span style="color: #E6DB74;">"/CCC"</span><span style="color: #F8F8F2;">,</span>
										<span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span><span style="color: #F8F8F2;">&nbsp;<span style="color: #75715E;">//....</span>&nbsp;})
										</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">})&nbsp;&nbsp;&nbsp;&nbsp;</span>
									</div>
								</td>
							</tr></table>
						</div>
						<p class="text-muted answers">
							上面的这种写法是不对的。 Promise的中文含义是“承诺”，则意味着，每一个Pormise对象，代表一次承诺
						</p>
						<p class="text-muted answers">
							而每一次承诺，只能保证一个任务的顺序，也就是说
						</p>
						<p class="text-muted answers">
							<code>new Promise(A).then(B); </code> 这句话表示， 只能保证<code>A</code>和<code>B</code>的顺序。
						</p>
						<p class="text-muted answers">
						 	一旦<code>A</code>执行完，<code>B</code>开始后，这次承诺也就兑现了，Promise对象也就失效了
						</p>
						<p class="text-muted answers">
							那如果还有C呢？  我们就必须在函数B中，重新创建新的Promise对象，来完成下一个承诺，具体的写法就像这样：
						</p>
						<div class="code-board">
							<table><tr>
								<td style="width: 813px; ">
									<div>
										<span style="color: #F92672;">new</span>
										<span style="color: #A6E22E;">Promise</span><span style="color: #F8F8F2;">(</span><span style="color: #A6E22E;">函数1</span><span style="color: #F8F8F2;">(resolve){</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajaxA(</span><span style="color: #E6DB74;">"xxxx"</span><span style="color: #F8F8F2;">,</span>
										<span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
										<span style="color: #F8F8F2;">resolve();</span><font style="color: #807B66;">//通知Promise该任务结束</font>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">})&nbsp;&nbsp;&nbsp;&nbsp;</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">}).</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #A6E22E;">函数2</span><span style="color: #F8F8F2;">(){</span>
									</div>
									<div >
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#807B66">//在函数2开始运行后，第一次创建的Promise对象完成使命，已经不能再继续工作。</font>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#807B66" >//此时，我们创建并返回了新的Promise对象</font>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F92672;">return new</span> <span style="color: #A6E22E;">Promise</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(</span><span style="color: rgb(253, 151, 31);" class="itlc">resolve</span><span style="color: #F8F8F2;">){</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
										<span style="color: #F8F8F2;">ajaxB(</span><span style="color: #E6DB74;">"xxxx"</span><span style="color: #F8F8F2;">,</span>
										<span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
										<span style="color: #F8F8F2;">resolve();</span><font style="color: #807B66;">//通知新的Promise对象该任务结束</font>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">})&nbsp;&nbsp;&nbsp;&nbsp;</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">}).</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #A6E22E;">函数3</span><span style="color: #F8F8F2;">(){</span> 
										<span>
											<font color="#807B66">//尽管这里使用了链式调用，但负责执行函数3的，已经是新的Promise对象了</font>
										</span>
									</div>
									<div>
										<span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
										<font style="color: #807B66; ">// 如果，我们还有ajaxD需要顺序调用</font>
									</div>
									<div>
										<span>
											&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
											<font style="color: #807B66; ">// 那就必须在这里重新new Promise()对象了</font>
										</span>
									</div>
									<div>
										&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #F8F8F2;">ajaxC(</span><span style="color: #E6DB74;">"xxx"</span><span style="color: #F8F8F2;">,</span> <span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){&nbsp;&nbsp;&nbsp;&nbsp; })</span>
									</div>
									<div>
										<span style="color: #F8F8F2;">})&nbsp;&nbsp;&nbsp;&nbsp;</span>
									</div>
								</td>
							</tr></table>
						</div>
						<p class="text-warning">
							<b>
								<code>问题7</code>, 懂了，那Promise还有什么其它强大的功能吗？
							</b>
						</p>
						<p class="text-muted answers">
							有啊，例如： 如果我有 <code>A</code>,<code>B</code>,<code>C</code> 三个异步任务，ABC同时开始执行
						</p>
						<p class="text-muted answers">
							当<code>A</code>,<code>B</code>,<code>C</code>三个任务全部都结束时，执任务D，传统方法实现起来就比较复杂，Promise就非常简单，就像这样：
						</p>
						<div class="code-board">
							<table><tr>
								<td style="width: 813px; ">
									<div><span style="color: #F8F8F2;">Promise.</span><span style="color: #A6E22E;">all</span><span style="color: #F8F8F2;">(<span style="color: #F8F8F2;">[</span><span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(</span><span style="color: #AE81FF;">A</span><span style="color: #F8F8F2;">),</span> <span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(</span><span style="color: #AE81FF;">B</span><span style="color: #F8F8F2;">),</span> <span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(</span><span style="color: #AE81FF;">C</span><span style="color: #F8F8F2;">)]</span><span style="color: #F8F8F2;">)</span></div><div ><span style="color: #F8F8F2;">.</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span></div><div ><span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style="color: #AE81FF;">D</span><span style="color: #F8F8F2;">();</span></div><div><span style="color: #F8F8F2;">});</span></div></td></tr></table>
						</div>
						<p class="text-warning">
							<b>
								<code>问题8</code>, 那如果我希望<code>A</code>,<code>B</code>,<code>C</code> 其中任意一个任务完成，就马上开始任务D，该怎么做？
							</b>
						</p>
						<div class="code-board">
							<table><tr>
								<td style="  width: 813px; "><div><span style="color: #F8F8F2;">Promise.</span><span style="color: #A6E22E;">race</span><span style="color: #F8F8F2;">(</span><span style="color: #F8F8F2;">[</span><span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(</span><span style="color: #AE81FF;">A</span><span style="color: #F8F8F2;">),</span> <span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(</span><span style="color: #AE81FF;">B</span><span style="color: #F8F8F2;">),</span> <span style="color: #F92672;">new</span> <span style="color: #F8F8F2;">Promise(</span><span style="color: #AE81FF;">C</span><span style="color: #F8F8F2;">)]</span><span style="color: #F8F8F2;">)</span></div><div ><span style="color: #F8F8F2;">.</span><span style="color: #A6E22E;">then</span><span style="color: #F8F8F2;">(</span><span style="color: #66D9EF;" class="itlc">function</span><span style="color: #F8F8F2;">(){</span></div><div ><span style="color: #F8F8F2;">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style="color: #AE81FF;">D</span><span style="color: #F8F8F2;">();</span></div><div><span style="color: #F8F8F2;">});</span></div></td></tr></table>
						</div>
					</div>
				</div>	

			</div>
		</div>

		<h3><p class="text-success">恭喜你，在这么短的时间内学会了Promise</p></h3>
	`
}