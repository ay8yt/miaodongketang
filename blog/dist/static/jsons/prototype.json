{
  "id": "prototype",
  "detail": `
		<div class="row">
			<div class="col-sm-12">
				<div class="jumbotron"> <p> <span>彻底搞定原型链</span> </p> </div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<code>注意： 这篇文章假定你熟悉基本的构造函数及json对象的用法</code>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<code>另外： 这篇文章假定你能够分清楚函数的this指向问题
						</code>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<code>But： 如果你暂时还搞不定，请先阅读文章
		        <a href="#/article/this" target="_blank">《用中国话学this指向》</a>
						</code>
					</div>
				</div>
		    <div class="panel panel-default">
		    	<div class="panel-heading">
		    		<code> 这篇文章同时假定你知道什么是数据结构，以及单向链表</code>
		    	</div>
		    </div>
			</div>
		</div>
		<br><br><br>

		<div class="panel panel-info">
			<div class="panel-heading"> <h2>先看一个典型的单向链表</h2> </div>
			<div class="panel-body">
        <p><img src="/static/images/prototype/01.png" ></p>
        <p>上面这段代码，是一个典型的<code>单向链表</code></p>
        <p>我们只能通过<code>n.next</code>来找到下一个节点</p>
        <p>但是没有办法从当前节点找到上一个节点</p>
        <p>
          <img src="/static/images/prototype/02.png" width=700>
        </p>
        <h3>
          <p class="text-danger">不过这和原型链有什么关系呢？</p>
          <p class="text-success">目前还没有关系。</p>
        </h3>
		  </div>
		</div>

    <div class="panel panel-info">
    	<div class="panel-heading"> <h2>原型对象从哪来？</h2> </div>
    	<div class="panel-body">
    		<p>
          <span class="bg-img"><img src="/static/images/prototype/04.png" ></span>
        </p>
    		<p>分析上面这段代码</p>
        <p>为什么obj明明是空的,却还能调用toString方法?</p>
        <p>这toString方法是哪里来的呢?</p>
        <p>再比如我们的数组对象</p>
        <p>
          <span class="bg-img"><img src="/static/images/prototype/05.png" ></span>
        </p>
        <p>其实,这些方法都来自于一个叫做原型的家伙</p>
        <p>我们可以使用 对象.__proto__ 的形式把原型对象打印出来 </p>
        <p>
          <span class="bg-img"><img src="/static/images/prototype/06.png" ></span>
        </p>

        <p>这是所有对象的一个隐式属性, 也就是正常情况下打印对象, 我们是看不到这个属性的</p>
        <p>但我们依然可以通过<code>__proto__</code> 这样一个比较奇怪的属性名字来访问原型对象</p>

        <p>这个属性名称访问起来确实不够方便,实际上它还有另外一种访问方式</p>
        <p>也是一种比较正式的访问方式, 就是通过函数名来访问</p>
        <p>例如看下面这个例子</p>
        <p>
          <span class="bg-img"><img src="/static/images/prototype/07.png" ></span>
        </p>

        <h3>
          <p class="text-danger">现在我们大概有了一些疑问</p>
        </h3>
        <ul class="list-group" style="width: 700px">
          <li class="list-group-item">1.原型对象中的所有属性,实例对象都能随便访问吗?</li>
          <li class="list-group-item">2.每个实例对象都有自己的原型对象, 还是大家共用一个?</li>
          <li class="list-group-item">3.实例对象自己的属性和原型的属性冲突了, 会访问谁呢?</li>
          <li class="list-group-item">4.原型对象跟继承有什么关系?</li>
          <li class="list-group-item">5.原型链又是怎么来的?</li>
        </ul>
    	</div>
    </div>

    <div class="panel panel-info">
    	<div class="panel-heading"> <h2>我们依次来解决几个疑问</h2> </div>
    	<div class="panel-body">
        <p class="text-warning"> <b> 1.原型对象中的所有属性,实例对象都能随便访问吗? </b> </p>
        <p class="text-muted answers"> 废话不多说, 我们来试验一下, 就知道结果 </p>
    		<p>
          <img src="/static/images/prototype/08.png" >
        </p>
        <p class="text-danger answers">在上面的代码中,我们创建一个构造函数 <span class="commond-line">Phone</span> </p>
        <p class="text-danger answers">同时我们给原型对象,添加了
          <span class="commond-line">price</span>、<span class="commond-line">color</span>两个属性
        </p>
        <p class="text-danger answers">同时添加了
          <span class="commond-line">playmusic</span>、<span class="commond-line">phonecall</span>两个方法
        </p>
        <p class="text-muted answers"> 接下来我们通过实例对象来访问一下这些内容 </p>
        <p>
          <img src="/static/images/prototype/09.png" >
        </p>
        <h3>
          <p class="text-success answers"> 可以看到,原型中的属性和方法都可以被实例对象直接访问! </p>
        </h3>
        <p class="text-warning"> <b> 2.每个实例对象都有自己的原型对象, 还是大家共用一个? </b> </p>
        <p class="text-muted answers"> 这是一道非常简单的数学证明题,证明过程如下: </p>
        <p>
          <img src="/static/images/prototype/10.png" >
        </p>
        <h3>
          <p class="text-success answers"> 最终结论是, 所有实例对象共享同一个原型对象 </p>
        </h3>

        <p class="text-warning"> <b> 3.实例对象自己的属性和原型的属性冲突了, 会访问谁呢?</b> </p>
        <p class="text-muted answers"> 我们再来试验一下 </p>
        <p>
          <img src="/static/images/prototype/11.png" >
        </p>
        <p class="text-muted answers">可以看到, 如果对象本身存在这个属性或方法, 会优先访问自己的 </p>
        <p class="text-muted answers"> 如果没有, 则访问原型的属性, 访问过程如下图 </p>
        <p>
          <img src="/static/images/prototype/12.png" width="800">
        </p>

        <p class="text-warning"> <b>4.原型对象跟继承有什么关系呢 ?</b> </p>
        <p class="text-muted answers"> 请你再思考一个问题 </p>
        <p class="text-muted answers"> 如果原型也是一个对象 </p>
        <p class="text-muted answers"> 那么它必然也应该有自己的原型对象,不是吗? </p>
        <p class="text-muted answers"> 我们可以通过 <code>p1.__proto__.__proto__</code> 进行访问 </p>
        <p>
          <img src="/static/images/prototype/13.png" width="800">
        </p>
        <p class="text-muted answers"> 我们把图画的再简单一点 </p>
        <p>
          <img src="/static/images/prototype/14.png" width="800">
        </p>
        <p class="text-muted answers"> 从图中可以看出,只要原型对象一直存在 </p>
        <p class="text-muted answers">
          对象P1就拥有了所有原型对象的能力, 我们也管这个叫做
          <span class="text-danger"><b>继承</b></span>
        </p>
        <p class="text-muted answers"> 而这些原型对象之间是什么关系呢? </p>

        <p> <code>p1</code> </p>
        <p> <code>p1.__proto__</code> </p>
        <p> <code>p1.__proto__.__proto__</code> </p>
        <p> <code>p1.__proto__.__proto__.__proto__</code> </p>

        <h3>
          <p class="text-success answers"> 原型链, 因此而得名 </p>
        </h3>
    	</div>
    </div>

    <div class="panel panel-info">
    	<div class="panel-heading"> <h2>需要补充的问题</h2> </div>
    	<div class="panel-body">
        <p class="text-warning"> <b>原型对象真的没有尽头吗?</b> </p>
        <p class="text-muted answers"> 当然不是的, 原型对象由浏览器自动创建, 当然也有它自己的规则 </p>
        <p class="text-muted answers"> 规则如下: </p>
        <ul class="list-group" style="width: 700px">
          <li class="list-group-item">1.每个构造函数在诞生的时候, 都会创建一个该函数的实例对象作为默认原型</li>
          <li class="list-group-item">相当于 <code>Phone.prototype = new Phone();</code> </li>
          <li class="list-group-item">2.而这个原型对象的原型, 则默认指向Object.prototype</li>
          <li class="list-group-item">相当于 <code>Phone.prototype.__proto__ = Object.prototype;</code></li>

          <li class="list-group-item">3.当然, Object.prototype 也是它自己的实例 </li>
          <li class="list-group-item">相当于 <code>Object.prototype = new Object();</code> </li>

          <li class="list-group-item">4. 但是, Object.prototype不再拥有原型对象 </li>
          <li class="list-group-item">相当于 <code>Object.prototype.__proto__ = null</code> </li>

          <li class="list-group-item">5. 因此,原型对象是有上限的 </li>
          <li class="list-group-item"> <code>p1.__proto__</code> 可访问 </li>
          <li class="list-group-item"> <code>p1.__proto__.__proto__</code> 可访问 </li>
          <li class="list-group-item"> <code>p1.__proto__.__proto__.__proto__</code> 为null </li>
        </ul>
      </div>
    </div>

    <div class="panel panel-info">
    	<div class="panel-heading"> <h2>原型的应用场景是什么?</h2> </div>
    	<div class="panel-body">
        <p class="text-warning"> <b>扩展能力</b> </p>
        <p>
          <img src="/static/images/prototype/15.png">
        </p>
      </div>
    </div>
	`
}
